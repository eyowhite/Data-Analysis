import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
file_path = '/path_to/cleaned_warehouse_messy_data.csv'
data = pd.read_csv(file_path)

# Convert the 'Last Restocked' column to datetime
data['Last Restocked'] = pd.to_datetime(data['Last Restocked'])

# 1. Distribution of products across categories
plt.figure(figsize=(10, 6))
sns.countplot(y='Category', data=data, order=data['Category'].value_counts().index)
plt.title('Distribution of Products Across Categories')
plt.xlabel('Count')
plt.ylabel('Category')
plt.show()

# 2. Price distribution
plt.figure(figsize=(10, 6))
sns.histplot(data['Price'], kde=True, bins=20)
plt.title('Price Distribution of Products')
plt.xlabel('Price')
plt.ylabel('Frequency')
plt.show()

# 3. Stock status distribution
plt.figure(figsize=(10, 6))
sns.countplot(x='Status', data=data)
plt.title('Stock Status Distribution')
plt.xlabel('Status')
plt.ylabel('Count')
plt.show()

# 4. Relationship between quantity and price
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Price', y='Quantity', hue='Category', data=data)
plt.title('Relationship Between Quantity and Price')
plt.xlabel('Price')
plt.ylabel('Quantity')
plt.show()

# 5. Frequency of restocking events by supplier
plt.figure(figsize=(10, 6))
data['Last Restocked Date'] = data['Last Restocked'].dt.date
sns.countplot(y='Supplier', hue='Last Restocked Date', data=data, palette='viridis')
plt.title('Frequency of Restocking Events by Supplier')
plt.xlabel('Count')
plt.ylabel('Supplier')
plt.show()

# Stock Analysis

# 1. Average quantity per product category
avg_quantity_per_category = data.groupby('Category')['Quantity'].mean().sort_values()

plt.figure(figsize=(10, 6))
avg_quantity_per_category.plot(kind='barh', color='teal')
plt.title('Average Quantity per Product Category')
plt.xlabel('Average Quantity')
plt.ylabel('Category')
plt.show()

# 2. Products frequently out of stock
out_of_stock_products = data[data['Status'] == 'Out of Stock']['Product Name'].value_counts()

plt.figure(figsize=(10, 6))
out_of_stock_products.head(10).plot(kind='bar', color='orange')
plt.title('Top 10 Products Frequently Out of Stock')
plt.xlabel('Count')
plt.ylabel('Product Name')
plt.show()

# 3. Most restocked products and their suppliers
restocked_products = data.groupby(['Product Name', 'Supplier']).size().sort_values(ascending=False)

plt.figure(figsize=(10, 6))
restocked_products.head(10).plot(kind='bar', color='purple')
plt.title('Top 10 Most Restocked Products and Their Suppliers')
plt.xlabel('Product and Supplier')
plt.ylabel('Number of Restocks')
plt.show()

# Supplier Analysis

# 1. Number of products supplied by each supplier
products_per_supplier = data['Supplier'].value_counts()

plt.figure(figsize=(10, 6))
products_per_supplier.plot(kind='bar', color='green')
plt.title('Number of Products Supplied by Each Supplier')
plt.xlabel('Supplier')
plt.ylabel('Number of Products')
plt.show()

# 2. Average restock time per supplier
data['Restock Year'] = data['Last Restocked'].dt.year
restock_counts_per_supplier = data.groupby(['Supplier', 'Restock Year']).size().unstack(fill_value=0)

plt.figure(figsize=(10, 6))
restock_counts_per_supplier.T.plot(kind='bar', stacked=True, figsize=(10, 6), cmap='viridis')
plt.title('Restocking Events Per Year by Supplier')
plt.xlabel('Year')
plt.ylabel('Number of Restocks')
plt.show()

# 3. Dependency on specific suppliers (proportion of products supplied)
supplier_dependency = products_per_supplier / products_per_supplier.sum()

plt.figure(figsize=(10, 6))
supplier_dependency.plot(kind='pie', autopct='%1.1f%%', startangle=140, cmap='coolwarm')
plt.title('Proportion of Products Supplied by Each Supplier')
plt.ylabel('')
plt.show()

# Trends in Stock Levels Over Time

# Extract year and month from the 'Last Restocked' for trend analysis
data['Restock Month'] = data['Last Restocked'].dt.to_period('M')

# Group by 'Restock Month' and sum the quantity to analyze overall stock levels over time
stock_trend = data.groupby('Restock Month')['Quantity'].sum()

plt.figure(figsize=(12, 6))
stock_trend.plot(kind='line', marker='o', color='blue')
plt.title('Trends in Stock Levels Over Time')
plt.xlabel('Month')
plt.ylabel('Total Stock Quantity')
plt.grid(True)
plt.show()

# Stock Trends by Category

# Group by 'Restock Month' and 'Category' to analyze stock levels by category over time
stock_trend_by_category = data.groupby(['Restock Month', 'Category'])['Quantity'].sum().unstack()

# Plot the stock trends for each category
plt.figure(figsize=(14, 8))
stock_trend_by_category.plot(kind='line', marker='o', figsize=(14, 8))
plt.title('Trends in Stock Levels Over Time by Category')
plt.xlabel('Month')
plt.ylabel('Total Stock Quantity')
plt.legend(title='Category', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.grid(True)
plt.show()

# Stock Trends by Supplier

# Group by 'Restock Month' and 'Supplier' to analyze stock levels by supplier over time
stock_trend_by_supplier = data.groupby(['Restock Month', 'Supplier'])['Quantity'].sum().unstack()

# Plot the stock trends for each supplier
plt.figure(figsize=(14, 8))
stock_trend_by_supplier.plot(kind='line', marker='o', figsize=(14, 8), cmap='tab10')
plt.title('Trends in Stock Levels Over Time by Supplier')
plt.xlabel('Month')
plt.ylabel('Total Stock Quantity')
plt.legend(title='Supplier', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.grid(True)
plt.show()

# Stock Trends by Warehouse

# Group by 'Restock Month' and 'Warehouse' to analyze stock levels by warehouse over time
stock_trend_by_warehouse = data.groupby(['Restock Month', 'Warehouse'])['Quantity'].sum().unstack()

# Plot the stock trends for each warehouse
plt.figure(figsize=(14, 8))
stock_trend_by_warehouse.plot(kind='line', marker='o', figsize=(14, 8), cmap='Set1')
plt.title('Trends in Stock Levels Over Time by Warehouse')
plt.xlabel('Month')
plt.ylabel('Total Stock Quantity')
plt.legend(title='Warehouse', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.grid(True)
plt.show()
